import { DesignData } from "design_data.slint";
import { Colors } from "colors.slint";
import { SearchBar, IconButton, LineEdit, InputLabel, Button, Layover } from "utils.slint";
import { ProductData, ProductSearchInput, Mode } from "data_structures.slint";
import { Text, TextStyle } from "text.slint";

component Result {
  in property<ProductData> product;
  in property<bool> last;

  Rectangle {
    VerticalLayout {
      spacing: 15px;

      HorizontalLayout {
        alignment: LayoutAlignment.start;
        padding-left: 32px;
        padding-right: 32px;
        spacing: 40px;

        Rectangle {
          width: 100px;
          height: 100px;
          border-radius: 50px;
          background: Colors.l_gray;

          Image {
            source: product.image;
          }
        }

        VerticalLayout {
          alignment: LayoutAlignment.center;
          spacing: 4px;

          HorizontalLayout {
            alignment: LayoutAlignment.start;
            spacing: 32px;

            Text {
              in_text: product.brand_name + " " + product.product_name;
              in_color: Colors.vl_gray;
              style: TextStyle.H3;
            }

            Text {
              in_text: "(" + product.item_name + ")";
              in_color: Colors.vl_gray;
              style: TextStyle.H6;
            }
          }

          HorizontalLayout {
            alignment: LayoutAlignment.start;
            spacing: 32px;

            Text {
              in_text: product.pack_name + " Pack";
              in_color: Colors.vl_gray;
              style: TextStyle.Paragraph;
            }
          }
        }
      }

      if !last : Rectangle {
        height: 2px;
        background: Colors.l_gray;
      }
    }
  }
}

component ProductListLayout {
  in property<DesignData> des_data;
  in property<bool> sidebar_activated;

  property<length> win_width: 16px * des_data.win_scale;
  property<length> win_height: 9px * des_data.win_scale;
  property<length> col_width: (win_width - (2 * des_data.padding) - (11 * des_data.gutter)) / des_data.columns;
  
  in property<ProductSearchInput> product_search_input;

  // Callbacks
  callback add_product_mode();
  callback search_text_changed(string);

  public function remove_focus() {
    search_bar.remove_focus();
  }

  Rectangle {
    content := VerticalLayout {
      alignment: LayoutAlignment.start;
      padding-top: 32px;
      padding-left: col_width + des_data.gutter;
      padding-right: col_width + des_data.gutter;
      spacing: 40px;


      HorizontalLayout {
        alignment: LayoutAlignment.center;
        spacing: 16px;

        Rectangle { // for some bug cz of which this thing took a freaking more height than it should!
          width: search_bar.preferred_width;
          height: search_bar.preferred_height;
          search_bar := SearchBar {
            des_data: des_data;
            default_text: "Search products";
            calc_width: sidebar_activated ? (col_width * 8 + des_data.gutter * 7 - 88px) : (col_width * 10 + des_data.gutter * 9 - 88px);

            search_text_changed(new_text) => {
              root.search_text_changed(new_text);
            }
          }
        }

        IconButton {
          icon: @image-url("../res/PlusCircle.png");
          bg_color: Colors.vl_gray;
          color: Colors.m_gray;
          bg_width: 72px;
          bg_height: 72px;

          clicked => {
            add_product_mode();
            search_bar.remove_focus();
          }
        }
      }

      VerticalLayout {
        spacing: 15px;
        for result[i] in product_search_input.results : Result {
          product: result;
          last: i >= product_search_input.results.length - 1;
        }
      }
    }
  }
}

component ProductAddDialogLayout {
  callback cancel <=> cancel.clicked;
  callback add(ProductData);
  in property<DesignData> des_data;

  public function remove_focus() {
    labels_remove_focus = !labels_remove_focus;
  }
  
  property<bool> labels_remove_focus: true;

  VerticalLayout {
    alignment: LayoutAlignment.center;

    HorizontalLayout {
      alignment: LayoutAlignment.center;
      Rectangle {
        border-radius: 10px;
        background: Colors.l_gray;

        content := VerticalLayout {
          padding: 16px;
          spacing: 12px;

          HorizontalLayout {
            alignment: LayoutAlignment.center;
            padding-bottom: 16px;
            Text {
              in_text: "Add Products";
              in_color: Colors.vd_gray;
              style: TextStyle.H3;
            }
          }

          property<[string]> fields: [
            "Brand name", "Item Name", "Product Name", "Pack Name"
          ];

          property<[string]> output_strings: ["", "", "", ""];

          for field[i] in fields : labels := InputLabel {
            color: Colors.d_gray;
            placeholder_text: "";
            des_data: des_data;
            calc_width: 300px;
            text_style: TextStyle.Paragraph;
            text_color: Colors.l_gray;

            label_name: field;
            label_color: Colors.vd_gray;
            label_style: TextStyle.H6;
            remove_label_focus: labels_remove_focus;

            text_updated(new_text) => {
              output_strings[i] = new_text;
            }
          }

          HorizontalLayout {
            padding: 12px;
            alignment: LayoutAlignment.space_around;

            add := Button {
              name: "Add Product";
              color: Colors.l_gray;
              bg_color: Colors.d_gray;
              text_style: TextStyle.Paragraph;

              clicked => {
                root.add({
                  brand_name: output_strings[0],
                  item_name: output_strings[1],
                  product_name: output_strings[2], 
                  pack_name: output_strings[3]
                });
              }
            }

            cancel := Button {
              name: "Cancel";
              color: Colors.l_gray;
              bg_color: Colors.d_gray;
              text_style: TextStyle.Paragraph;
            }
          }
        }

        width: content.preferred_width;
        height: content.preferred_height;
      }
    }
  }
}

export component ProductPageLayout {
  in property<DesignData> des_data;
  in property<bool> sidebar_activated;

  property<length> win_width: 16px * des_data.win_scale;
  property<length> win_height: 9px * des_data.win_scale;
  property<length> col_width: (win_width - (2 * des_data.padding) - (11 * des_data.gutter)) / des_data.columns;

  in property<ProductSearchInput> product_search_input;
  in property<Mode> mode;

  // Callbacks
  callback add_product_mode <=> layout.add_product_mode;
  callback cancel_add_product_mode();
  callback add_the_product(ProductData);
  callback search_text_changed(string);

  VerticalLayout {
    alignment: LayoutAlignment.start;
    Rectangle {
      height: win_height - (0.6px * des_data.win_scale);
      width: win_width - (col_width * 2 + des_data.gutter + des_data.padding);

      TouchArea {
        clicked => {
          layout.remove_focus();
        }
      }
      VerticalLayout {
        alignment: LayoutAlignment.start;
        layout := ProductListLayout {
          des_data: des_data;
          sidebar_activated: sidebar_activated;
          product_search_input: product_search_input;

          search_text_changed(new_text) => {
            root.search_text_changed(new_text);
          }
        }
      }

      if mode == Mode.ProductAdd : layover := Layover {
        width: parent.width;
        height: parent.height;

        TouchArea {
          clicked => {
            add_dialog.remove_focus();
          }
        }

        add_dialog := ProductAddDialogLayout {
          des_data: des_data;

          cancel => {
            cancel_add_product_mode();
          }
          add(data) => {
            add_the_product(data);
          }
        }
      }
    }
  }
}
