import { Text, TextStyle } from "text.slint";
import { Colors } from "colors.slint";
import { DesignData } from "design_data.slint";
import { SearchBar } from "utils.slint";
import { DealerData, ProductData, DealerPricePair, ProductDealersConnection } from "data_structures.slint";

component DealerRow {
  in property<DealerPricePair> dealer_price_pair;
  in property<bool> first: false;
  in property<bool> last: false;

  Rectangle {
    background: Colors.l_gray;

    border-top-left-radius: first ? 10px : 0px;
    border-top-right-radius: first ? 10px : 0px;
    border-bottom-left-radius: last ? 10px : 0px;
    border-bottom-right-radius: last ? 10px : 0px;

    border-width: 2px;
    border-color: Colors.m_gray;

    VerticalLayout {
      alignment: LayoutAlignment.center;
      padding-top: 8px;
      padding-bottom: 8px;

      HorizontalLayout {
        alignment: LayoutAlignment.space_between;
        padding-left: 20px;
        padding-right: 20px;

        VerticalLayout {
          HorizontalLayout {
            alignment: LayoutAlignment.start;
            Text {
              in_text: dealer_price_pair.dealer.name;
              in_color: Colors.vd_gray;
              style: TextStyle.H2;
            }
          }

          HorizontalLayout {
            alignment: LayoutAlignment.start;
            Text {
              in_text: "Phone Num: " + dealer_price_pair.dealer.phone_num;
              in_color: Colors.vd_gray;
              style: TextStyle.Paragraph;
            }
          }
        }

        Text {
          in_text: "â‚¹" + dealer_price_pair.price + "/-";
          in_color: Colors.vd_gray;
          style: TextStyle.H1;
        }
      }
    }
  }
}

component ProductDetails {
  in property<[ProductData]> input;
  VerticalLayout {
    for pr[i] in input : Rectangle {
      VerticalLayout {
        alignment: LayoutAlignment.start;
        padding-left: 24px;
        padding-right: 24px;

        HorizontalLayout {
          alignment: LayoutAlignment.space_between;
          padding-top: 16px;
          padding-bottom: 16px;
          HorizontalLayout {
            spacing: 24px;
            Rectangle {
              width: 48px;
              height: self.width;
              border-radius: self.width / 2;
              clip: true;
              background: Colors.m_gray;

              Image {
                  source: pr.image;
              }
            }

            Text {
              in_text: pr.brand_name;
              in_color: Colors.d_gray;
              style: TextStyle.H4;
            }
          }

          Text {
            in_text: pr.pack_size;
            in_color: Colors.d_gray;
            style: TextStyle.H5;
          }
        }

        if i != input.length - 1 : Rectangle {
          height: 2px;
          background: Colors.m_gray;
        }
      }
    }
  }
}

component ComparisonTable {
  in property<DesignData> des_data;
  in property<ProductDealersConnection> conns;
  property<length> win_width: 16px * des_data.win_scale;
  property<length> win_height: 9px * des_data.win_scale;
  property<length> col_width: (win_width - (2 * des_data.padding) - (11 * des_data.gutter)) / des_data.columns;

  Rectangle {
    height: win_height - (0.6px * des_data.win_scale);

    VerticalLayout {
      alignment: LayoutAlignment.center;
      spacing: 24px;

      Rectangle {
        background: Colors.l_gray;
        border-radius: 10px;

        width: col_width * 6 + des_data.gutter * 5;
        height: 9 * 8px;

        Text {
          in_text: conns.product.brand_name;
          in_color: Colors.vd_gray;
          style: TextStyle.H1;
        }
      }

      VerticalLayout {
        for pair[i] in conns.dealer_price_pairs: DealerRow {
          dealer_price_pair: pair;
          first: i == 0;
          last: i == conns.dealer_price_pairs.length - 1;
        }
      }
    }
  }
}

component ProductSearch {
  in property<DesignData> des_data;
  in property<[ProductData]> best_results;
  in property<[ProductData]> recent_results;
  property<length> win_width: 16px * des_data.win_scale;
  property<length> win_height: 9px * des_data.win_scale;
  property<length> col_width: (win_width - (2 * des_data.padding) - (11 * des_data.gutter)) / des_data.columns;

  VerticalLayout {
    spacing: 24px;

    SearchBar {
      color: Colors.m_gray;
      default_text: "Search product name";
      des_data: des_data;
    }

    if best_results.length != 0 || recent_results.length != 0 : Rectangle {
      width: col_width * 6 + des_data.gutter * 5;
      background: Colors.vl_gray;
      border-radius: 10px;

      // for height calculations
      VerticalLayout {
        ProductDetails {
          input: best_results;
        }

        if recent_results.length != 0 : VerticalLayout {
          HorizontalLayout {
            alignment: LayoutAlignment.start;
            padding-left: 24px;
            padding-right: 24px;
            padding-top: 8px;
            padding-bottom: 8px;
            Text {
              in_text: "Recents";
              in_color: Colors.m_gray;
              style: TextStyle.H6;
            }
          }

          ProductDetails {
            input: recent_results;
          }
        }
      }
    }
  }
}

export component ComparisonLayout {
  in property<DesignData> des_data;

  property<length> win_width: 16px * des_data.win_scale;
  property<length> win_height: 9px * des_data.win_scale;
  property<length> col_width: (win_width - (2 * des_data.padding) - (11 * des_data.gutter)) / des_data.columns;

  in property<ProductDealersConnection> conns;
  in property<bool> product_selected: true;

  in-out property<string> search_text;
  in property<[ProductData]> best_results;
  in property<[ProductData]> recent_results;

  VerticalLayout {
    Rectangle {
      height: win_height - (0.6px * des_data.win_scale);
      if product_selected : ComparisonTable {
        des_data: des_data;
        conns: conns;
      }

      if !product_selected : ProductSearch {
        des_data: des_data;
        best_results: best_results;
        recent_results: recent_results;
      }
    }
  }
}
