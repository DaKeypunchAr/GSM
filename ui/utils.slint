import { Text, TextStyle } from "text.slint";
import { Colors } from "colors.slint";
import { DesignData } from "design_data.slint";

export component RadioButton {
  in-out property<bool> selected: false;
  in-out property<string> tag: "Undefined";
  in-out property<color> color_selected: #000;
  in-out property<color> color_unselected: #cccccc;

  in-out property<int> size: 30;

  Rectangle {
    background: transparent;
    border-color: selected ? color_selected : color_unselected;
    width: size * 1px;
    height: size * 1px;
    border-width: 1px;
    border-radius: size * 0.5px;

    HorizontalLayout {
      alignment: LayoutAlignment.center;
      VerticalLayout {
        alignment: LayoutAlignment.center;
        Rectangle {
          background: selected ? color_selected : transparent;
          width: size * 0.5px;
          height: size * 0.5px;
          border-radius: size * 0.25px;
        }
      }
    }
  }
}

export component RadioLabel {
  in-out property<string> label: "Unknown Label";
  in-out property<string> in_tag: "Unknown tag";
  in-out property<color> in_color_selected;
  in-out property<color> in_color_unselected;
  in-out property<bool> in_selected: false;
  in-out property<int> button_size: 15;

  HorizontalLayout {
    alignment: LayoutAlignment.space-between;
    Text {
      in_text: label;
      in_color: Colors.vd_gray;
      style: TextStyle.Paragraph;
    }

    RadioButton {
      tag: in_tag;
      selected: in_selected;
      color_selected: in_color_selected;
      color_unselected: in_color_unselected;
      size: button_size;
    }
  }
}

export component SearchBar {
  in property<color> color: Colors.m_gray;
  in property<color> select_color: Colors.vd_gray;
  in property<string> default_text: "Search things...";
  in property<DesignData> des_data;

  property<length> win_width: 16px * des_data.win_scale;
  property<length> col_width: (win_width - (2 * des_data.padding) - (11 * des_data.gutter)) / des_data.columns;

  in property<length> calc_width: col_width * 6 + des_data.gutter * 5;

  property<bool> user_edited: false;
  in-out property<string> text;
  changed text => {
    if user_edited {
      user_edited = false;
    } else {
      input.text = text;
    }
  }

  public function remove_focus() {
    input.clear_focus();
  }

  Rectangle {
    HorizontalLayout {
      Rectangle {
        width: calc_width;
        height: 9 * 8px;
        background: Colors.vl_gray;
        border-radius: 10px;

        area := TouchArea {
          clicked => {
            input.focus();
          }
        }

        HorizontalLayout {
          padding-left: 24px;
          padding-right: 24px;
          padding-top: 16px;
          padding-bottom: 16px;
          spacing: 32px;
          alignment: LayoutAlignment.start;

          Image {
            source: @image-url("../res/search.png");
            colorize: input.has_focus ? select_color : color;
          }

          HorizontalLayout {
            spacing: 32px;
            alignment: LayoutAlignment.start;

            if !input.has_focus && input.text == "" : Text {
              in_text: default_text;
              in_color: color;
              style: TextStyle.H3;
            }

            input := TextInput {
              width: 100%;
              height: 100%;
              single-line: true;
              color: select_color;
              font-family: "Space Grotesk";
              font-size: 2.074rem;
              edited => {
                user_edited = true;
                text = input.text;
              }
            }
          }
        }
      }
    }
  }
}

export component IconButton {
  in property<image> icon;
  in property<color> bg_color;
  in property<color> color;
  in property<length> bg_width;
  in property<length> bg_height;

  callback clicked <=> area.clicked;

  HorizontalLayout {
    Rectangle {
      background: bg_color;
      width: bg_width;
      height: bg_height;
      border-radius: 10px;

      area := TouchArea {}
      VerticalLayout {
        alignment: LayoutAlignment.center;
        HorizontalLayout {
          alignment: LayoutAlignment.center;
          Image {
            source: icon;
            colorize: color;
            max-width: bg_width/2;
          }
        }
      }
    }
  }
}

export component LineEdit {
  in property<color> color;
  in property<color> text_color;
  in property<string> placeholder_text: "Gimme input of some kind";
  in property<DesignData> des_data;
  in property<TextStyle> text_style: TextStyle.H6;

  in property<length> calc_width;
  in-out property<string> text: input.text;

  changed text => {
    if user_edited {
      user_edited = false;
    } else {
      input.text = text;
    }
  }

  public function remove_focus() {
    input.clear_focus();
  }

  property<bool> user_edited: false;

  property<length> win_width: 16px * des_data.win_scale;
  property<length> col_width: (win_width - (2 * des_data.padding) - (11 * des_data.gutter)) / des_data.columns;

  property<length> font_size: {
    if (text_style == TextStyle.H1) { 2.98625rem }
    else if (text_style == TextStyle.H2) { 2.488rem }
    else if (text_style == TextStyle.H3) { 2.074rem }
    else if (text_style == TextStyle.H4) { 1.728rem }
    else if (text_style == TextStyle.H5) { 1.44rem }
    else if (text_style == TextStyle.H6) { 1.2rem }
    else if (text_style == TextStyle.Paragraph) { 1rem }
    else if (text_style == TextStyle.Caption) { 0.833rem }
    else { 1rem } // Default value
  };

  HorizontalLayout {
    Rectangle {
      width: calc_width;
      height: content.preferred_height * 1.5;
      background: color;
      border-radius: 10px;

      content := VerticalLayout {
        alignment: LayoutAlignment.center;
        padding-left: 8px;
        padding-right: 8px;
        input := TextInput {
          single-line: true;
          color: text_color;
          font-family: "Space Grotesk";
          font-size: root.font-size;
          edited => {
            user_edited = true;
            text = input.text;
          }
        }
      }
    }
  }
}

export component InputLabel {
  in property<color> color;
  in property<color> text_color;
  in property<string> placeholder_text: "Gimme input of some kind";
  in property<DesignData> des_data;
  in property<TextStyle> text_style: TextStyle.H6;
  in property<length> calc_width;

  in property<string> label_name;
  in property<color> label_color;
  in property<TextStyle> label_style;

  public function remove_focus() {
    edit.remove_focus();
  }

  in-out property<bool> remove_label_focus: false;
  changed remove_label_focus => {
    remove_focus();
  }

  HorizontalLayout {
    alignment: LayoutAlignment.space_between;
    spacing: 12px;

    Text {
      in_text: label_name + ": ";
      in_color: label_color;
      style: label_style;
    }

    edit := LineEdit {
      color: color;
      placeholder_text: placeholder_text;
      des_data: des_data;
      calc_width: calc_width;
      text_style: text_style;
      text_color: text_color;
    }
  }
}

export component Button {
  callback clicked <=> area.clicked;

  in property<string> name: "Button";
  in property<color> color;
  in property<color> bg_color;
  in property<TextStyle> text_style;

  HorizontalLayout {
    Rectangle {
      area := TouchArea {}

      width: text.preferred_width * 2;
      height: text.preferred_height * 2;
      border-radius: 10px;

      text := Text {
        in_text: name;
        in_color: color;
        style: text_style;
      }

      background: bg_color;
    }
  }
}

export component Layover {
  in property<length> p_width;
  in property<length> p_height;

  callback clicked_on_layover <=> area.clicked;
  Rectangle {
    width: 100%;
    height: 100%;
    background: #00000080;
    area := TouchArea {}

    @children
  }
}
